# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:15:03+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AdditionalResourceType(Enum):
    HELPFUL_RESOURCE = 'HELPFUL_RESOURCE'
    IMPROVEMENT_PLAN = 'IMPROVEMENT_PLAN'


class AnswerReason(Enum):
    OUT_OF_SCOPE = 'OUT_OF_SCOPE'
    BUSINESS_PRIORITIES = 'BUSINESS_PRIORITIES'
    ARCHITECTURE_CONSTRAINTS = 'ARCHITECTURE_CONSTRAINTS'
    OTHER = 'OTHER'
    NONE = 'NONE'


class ApplicationArn(
    RootModel[
        constr(
            pattern=r'arn:aws[-a-z]*:servicecatalog:[a-z]{2}(-gov)?-[a-z]+-\d:\d{12}:/applications/[a-z0-9]+',
            max_length=2084,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[-a-z]*:servicecatalog:[a-z]{2}(-gov)?-[a-z]+-\d:\d{12}:/applications/[a-z0-9]+',
        max_length=2084,
    )


class AwsAccountId(RootModel[constr(pattern=r'[0-9]{12}')]):
    root: constr(pattern=r'[0-9]{12}') = Field(
        ..., description='An Amazon Web Services account ID.'
    )


class AwsRegion(RootModel[constr(max_length=100)]):
    root: constr(max_length=100) = Field(
        ...,
        description='An Amazon Web Services Region, for example, <code>us-west-2</code> or <code>ap-northeast-1</code>.',
    )


class Base64String(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>The Base64-encoded string representation of a lens review report.</p> <p>This data can be used to create a PDF file.</p> <p>Only returned by <a>GetConsolidatedReport</a> when <code>PDF</code> format is requested.</p>',
    )


class CheckDescription(RootModel[str]):
    root: str


class CheckFailureReason(Enum):
    ASSUME_ROLE_ERROR = 'ASSUME_ROLE_ERROR'
    ACCESS_DENIED = 'ACCESS_DENIED'
    UNKNOWN_ERROR = 'UNKNOWN_ERROR'
    PREMIUM_SUPPORT_REQUIRED = 'PREMIUM_SUPPORT_REQUIRED'


class CheckId(RootModel[str]):
    root: str


class CheckName(RootModel[str]):
    root: str


class CheckProvider(Enum):
    TRUSTED_ADVISOR = 'TRUSTED_ADVISOR'


class CheckStatus(Enum):
    OKAY = 'OKAY'
    WARNING = 'WARNING'
    ERROR = 'ERROR'
    NOT_AVAILABLE = 'NOT_AVAILABLE'
    FETCH_FAILED = 'FETCH_FAILED'


class CheckStatusCount(RootModel[conint(ge=1, le=101)]):
    root: conint(ge=1, le=101)


class ChoiceContentDisplayText(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ChoiceContentUrl(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ChoiceDescription(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024) = Field(
        ..., description='The description of a choice.'
    )


class ChoiceId(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64) = Field(
        ..., description='The ID of a choice.'
    )


class ChoiceNotes(RootModel[constr(max_length=250)]):
    root: constr(max_length=250)


class ChoiceReason(Enum):
    OUT_OF_SCOPE = 'OUT_OF_SCOPE'
    BUSINESS_PRIORITIES = 'BUSINESS_PRIORITIES'
    ARCHITECTURE_CONSTRAINTS = 'ARCHITECTURE_CONSTRAINTS'
    OTHER = 'OTHER'
    NONE = 'NONE'


class ChoiceStatus(Enum):
    SELECTED = 'SELECTED'
    NOT_APPLICABLE = 'NOT_APPLICABLE'
    UNSELECTED = 'UNSELECTED'


class ChoiceTitle(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512) = Field(
        ..., description='The title of a choice.'
    )


class ChoiceUpdate(BaseModel):
    Notes: Optional[ChoiceNotes] = None
    Reason: Optional[ChoiceReason] = None
    Status: ChoiceStatus


class ChoiceUpdates(RootModel[Optional[Dict[str, ChoiceUpdate]]]):
    root: Optional[Dict[str, ChoiceUpdate]] = None


class ClientRequestToken(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>',
    )


class ConflictException(RootModel[Any]):
    root: Any


class Count(RootModel[conint(ge=0)]):
    root: conint(ge=0) = Field(
        ..., description='A non-negative integer that denotes how many.'
    )


class DeleteLensInput(BaseModel):
    pass


class DeleteLensShareInput(BaseModel):
    pass


class DeleteWorkloadInput(BaseModel):
    pass


class DeleteWorkloadShareInput(BaseModel):
    pass


class DifferenceStatus(Enum):
    UPDATED = 'UPDATED'
    NEW = 'NEW'
    DELETED = 'DELETED'


class DisplayText(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ExportLensInput(BaseModel):
    pass


class FlaggedResources(RootModel[conint(ge=1, le=9999)]):
    root: conint(ge=1, le=9999)


class GetAnswerInput(BaseModel):
    pass


class GetConsolidatedReportInput(BaseModel):
    pass


class GetConsolidatedReportMaxResults(RootModel[conint(ge=1, le=15)]):
    root: conint(ge=1, le=15)


class GetLensInput(BaseModel):
    pass


class GetLensReviewInput(BaseModel):
    pass


class GetLensReviewReportInput(BaseModel):
    pass


class GetLensVersionDifferenceInput(BaseModel):
    pass


class GetMilestoneInput(BaseModel):
    pass


class GetWorkloadInput(BaseModel):
    pass


class HelpfulResourceUrl(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048) = Field(
        ...,
        description='<p>The helpful resource URL.</p> <p>For Amazon Web Services official lenses, this is the helpful resource URL for a question or choice.</p> <p>For custom lenses, this is the helpful resource URL for a question and is only provided if <code>HelpfulResourceDisplayText</code> was specified for the question.</p>',
    )


class ImportLensStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETE = 'COMPLETE'
    ERROR = 'ERROR'


class ImprovementPlanUrl(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048) = Field(
        ...,
        description='<p>The improvement plan URL for a question in an Amazon Web Services official lenses.</p> <p>This value is only available if the question has been answered.</p> <p>This value does not apply to custom lenses.</p>',
    )


class IncludeSharedResources(RootModel[bool]):
    root: bool


class InternalServerException(RootModel[Any]):
    root: Any


class IsApplicable(RootModel[bool]):
    root: bool = Field(
        ..., description='Defines whether this question is applicable to a lens review.'
    )


class IsMajorVersion(RootModel[bool]):
    root: bool


class IsReviewOwnerUpdateAcknowledged(RootModel[bool]):
    root: bool


class LensAlias(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128) = Field(
        ...,
        description='<p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>',
    )


class LensAliases(RootModel[List[LensAlias]]):
    root: List[LensAlias] = Field(
        ...,
        description='<p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p> <p>Identify a lens using its <a>LensSummary$LensAlias</a>.</p>',
        min_length=1,
    )


class LensArn(RootModel[str]):
    root: str


class LensDescription(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024) = Field(
        ..., description='The description of the lens.'
    )


class LensJSON(RootModel[constr(min_length=2, max_length=500000)]):
    root: constr(min_length=2, max_length=500000)


class LensName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128) = Field(
        ..., description='The full name of the lens.'
    )


class LensNamePrefix(RootModel[constr(max_length=100)]):
    root: constr(max_length=100)


class LensOwner(RootModel[str]):
    root: str


class LensReviewReport(BaseModel):
    Base64String_1: Optional[Base64String] = Field(None, alias='Base64String')
    LensAlias_1: Optional[LensAlias] = Field(None, alias='LensAlias')
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')


class LensStatus(Enum):
    CURRENT = 'CURRENT'
    NOT_CURRENT = 'NOT_CURRENT'
    DEPRECATED = 'DEPRECATED'
    DELETED = 'DELETED'
    UNSHARED = 'UNSHARED'


class LensStatusType(Enum):
    ALL = 'ALL'
    DRAFT = 'DRAFT'
    PUBLISHED = 'PUBLISHED'


class LensType(Enum):
    AWS_OFFICIAL = 'AWS_OFFICIAL'
    CUSTOM_SHARED = 'CUSTOM_SHARED'
    CUSTOM_SELF = 'CUSTOM_SELF'


class LensVersion(RootModel[constr(min_length=1, max_length=32)]):
    root: constr(min_length=1, max_length=32)


class LensesAppliedCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ListAnswersInput(BaseModel):
    pass


class ListAnswersMaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class ListLensReviewImprovementsInput(BaseModel):
    pass


class ListLensReviewImprovementsMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ListLensReviewsInput(BaseModel):
    pass


class ListLensSharesInput(BaseModel):
    pass


class ListLensesInput(BaseModel):
    pass


class ListNotificationsMaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class ListShareInvitationsInput(BaseModel):
    pass


class ListShareInvitationsMaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class ListTagsForResourceInput(BaseModel):
    pass


class ListWorkloadSharesInput(BaseModel):
    pass


class ListWorkloadSharesMaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class ListWorkloadsMaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class MaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50) = Field(
        ..., description='The maximum number of results to return for this request.'
    )


class MetricType(Enum):
    WORKLOAD = 'WORKLOAD'


class MilestoneName(RootModel[constr(min_length=3, max_length=100)]):
    root: constr(min_length=3, max_length=100) = Field(
        ...,
        description='<p>The name of the milestone in a workload.</p> <p>Milestone names must be unique within a workload.</p>',
    )


class MilestoneNumber(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100) = Field(
        ...,
        description='<p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>',
    )


class NextToken(RootModel[str]):
    root: str = Field(
        ..., description='The token to use to retrieve the next set of results.'
    )


class Notes(RootModel[constr(max_length=2084)]):
    root: constr(max_length=2084) = Field(
        ..., description='The notes associated with the workload.'
    )


class NotificationType(Enum):
    LENS_VERSION_UPGRADED = 'LENS_VERSION_UPGRADED'
    LENS_VERSION_DEPRECATED = 'LENS_VERSION_DEPRECATED'


class OrganizationSharingStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class PermissionType(Enum):
    READONLY = 'READONLY'
    CONTRIBUTOR = 'CONTRIBUTOR'


class PillarId(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64) = Field(
        ...,
        description='<p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>',
    )


class PillarName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128) = Field(
        ..., description='The name of the pillar.'
    )


class PillarNotes(RootModel[Optional[Dict[str, Notes]]]):
    root: Optional[Dict[str, Notes]] = None


class QuestionDescription(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024) = Field(
        ..., description='The description of the question.'
    )


class QuestionId(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128) = Field(
        ..., description='The ID of the question.'
    )


class QuestionTitle(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512) = Field(
        ..., description='The title of the question.'
    )


class ReportFormat(Enum):
    PDF = 'PDF'
    JSON = 'JSON'


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class Risk(Enum):
    UNANSWERED = 'UNANSWERED'
    HIGH = 'HIGH'
    MEDIUM = 'MEDIUM'
    NONE = 'NONE'
    NOT_APPLICABLE = 'NOT_APPLICABLE'


class RiskCounts(RootModel[Optional[Dict[str, Count]]]):
    root: Optional[Dict[str, Count]] = None


class SelectedChoices(RootModel[List[ChoiceId]]):
    root: List[ChoiceId] = Field(
        ...,
        description='<p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>',
    )


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class ShareId(RootModel[constr(pattern=r'[0-9a-f]{32}')]):
    root: constr(pattern=r'[0-9a-f]{32}') = Field(
        ..., description='The ID associated with the workload share.'
    )


class ShareInvitationAction(Enum):
    ACCEPT = 'ACCEPT'
    REJECT = 'REJECT'


class ShareInvitationId(RootModel[constr(pattern=r'[0-9a-f]{32}')]):
    root: constr(pattern=r'[0-9a-f]{32}')


class ShareResourceType(Enum):
    WORKLOAD = 'WORKLOAD'
    LENS = 'LENS'


class ShareStatus(Enum):
    ACCEPTED = 'ACCEPTED'
    REJECTED = 'REJECTED'
    PENDING = 'PENDING'
    REVOKED = 'REVOKED'
    EXPIRED = 'EXPIRED'
    ASSOCIATING = 'ASSOCIATING'
    ASSOCIATED = 'ASSOCIATED'
    FAILED = 'FAILED'


class SharedWith(RootModel[constr(min_length=12, max_length=2048)]):
    root: constr(min_length=12, max_length=2048) = Field(
        ...,
        description='The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.',
    )


class SharedWithPrefix(RootModel[constr(max_length=100)]):
    root: constr(max_length=100)


class StatusMessage(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagResourceOutput(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class ThrottlingException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime = Field(..., description='The date and time recorded.')


class TrustedAdvisorIntegrationStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class UntagResourceInput(BaseModel):
    pass


class UntagResourceOutput(BaseModel):
    pass


class UpdateAnswerInput(BaseModel):
    ChoiceUpdates_1: Optional[ChoiceUpdates] = Field(None, alias='ChoiceUpdates')
    IsApplicable_1: Optional[IsApplicable] = Field(None, alias='IsApplicable')
    Notes_1: Optional[Notes] = Field(None, alias='Notes')
    Reason: Optional[AnswerReason] = None
    SelectedChoices_1: Optional[SelectedChoices] = Field(None, alias='SelectedChoices')


class UpdateGlobalSettingsInput(BaseModel):
    OrganizationSharingStatus_1: Optional[OrganizationSharingStatus] = Field(
        None, alias='OrganizationSharingStatus'
    )


class UpdateLensReviewInput(BaseModel):
    LensNotes: Optional[Notes] = None
    PillarNotes_1: Optional[PillarNotes] = Field(None, alias='PillarNotes')


class UpdateShareInvitationInput(BaseModel):
    ShareInvitationAction_1: ShareInvitationAction = Field(
        ..., alias='ShareInvitationAction'
    )


class UpdateWorkloadShareInput(BaseModel):
    PermissionType_1: PermissionType = Field(..., alias='PermissionType')


class UpgradeLensReviewInput(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    MilestoneName_1: MilestoneName = Field(..., alias='MilestoneName')


class ValidationException(RootModel[Any]):
    root: Any


class WorkloadAccountIds(RootModel[List[AwsAccountId]]):
    root: List[AwsAccountId] = Field(
        ...,
        description='The list of Amazon Web Services account IDs associated with the workload.',
        max_length=100,
    )


class WorkloadApplications(RootModel[List[ApplicationArn]]):
    root: List[ApplicationArn] = Field(..., max_length=1)


class WorkloadArchitecturalDesign(
    RootModel[
        constr(pattern=r'^(|(https?|ftp):\/\/[^\s/$.?#].[^\s]*)$', max_length=2048)
    ]
):
    root: constr(
        pattern=r'^(|(https?|ftp):\/\/[^\s/$.?#].[^\s]*)$', max_length=2048
    ) = Field(..., description='The URL of the architectural design for the workload.')


class WorkloadArn(RootModel[str]):
    root: str = Field(..., description='The ARN for the workload.')


class WorkloadAwsRegions(RootModel[List[AwsRegion]]):
    root: List[AwsRegion] = Field(
        ...,
        description='The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.',
        max_length=50,
    )


class WorkloadDescription(RootModel[constr(min_length=3, max_length=250)]):
    root: constr(min_length=3, max_length=250) = Field(
        ..., description='The description for the workload.'
    )


class WorkloadDiscoveryConfig(BaseModel):
    TrustedAdvisorIntegrationStatus_1: Optional[TrustedAdvisorIntegrationStatus] = (
        Field(None, alias='TrustedAdvisorIntegrationStatus')
    )


class WorkloadEnvironment(Enum):
    PRODUCTION = 'PRODUCTION'
    PREPRODUCTION = 'PREPRODUCTION'


class WorkloadId(RootModel[constr(pattern=r'[0-9a-f]{32}')]):
    root: constr(pattern=r'[0-9a-f]{32}') = Field(
        ...,
        description='The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.',
    )


class WorkloadImprovementStatus(Enum):
    NOT_APPLICABLE = 'NOT_APPLICABLE'
    NOT_STARTED = 'NOT_STARTED'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETE = 'COMPLETE'
    RISK_ACKNOWLEDGED = 'RISK_ACKNOWLEDGED'


class WorkloadIndustry(RootModel[constr(max_length=100)]):
    root: constr(max_length=100) = Field(
        ..., description='The industry for the workload.'
    )


class WorkloadIndustryType(RootModel[constr(max_length=100)]):
    root: constr(max_length=100) = Field(
        ...,
        description='<p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>',
    )


class WorkloadLenses(RootModel[List[LensAlias]]):
    root: List[LensAlias] = Field(
        ...,
        description='The list of lenses associated with the workload. Each lens is identified by its <a>LensSummary$LensAlias</a>.',
    )


class WorkloadName(RootModel[constr(min_length=3, max_length=100)]):
    root: constr(min_length=3, max_length=100) = Field(
        ...,
        description='<p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>',
    )


class WorkloadNamePrefix(RootModel[constr(max_length=100)]):
    root: constr(max_length=100) = Field(
        ...,
        description='An optional string added to the beginning of each workload name returned in the results.',
    )


class WorkloadNonAwsRegion(RootModel[constr(min_length=3, max_length=25)]):
    root: constr(min_length=3, max_length=25)


class WorkloadNonAwsRegions(RootModel[List[WorkloadNonAwsRegion]]):
    root: List[WorkloadNonAwsRegion] = Field(
        ...,
        description=' The list of non-Amazon Web Services Regions associated with the workload.',
        max_length=5,
    )


class WorkloadPillarPriorities(RootModel[List[PillarId]]):
    root: List[PillarId] = Field(
        ...,
        description='The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.',
    )


class WorkloadReviewOwner(RootModel[constr(min_length=3, max_length=255)]):
    root: constr(min_length=3, max_length=255) = Field(
        ...,
        description='The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.',
    )


class WorkloadShare(BaseModel):
    PermissionType_1: Optional[PermissionType] = Field(None, alias='PermissionType')
    ShareId_1: Optional[ShareId] = Field(None, alias='ShareId')
    SharedBy: Optional[AwsAccountId] = None
    SharedWith_1: Optional[SharedWith] = Field(None, alias='SharedWith')
    Status: Optional[ShareStatus] = None
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')
    WorkloadName_1: Optional[WorkloadName] = Field(None, alias='WorkloadName')


class WorkloadShareSummary(BaseModel):
    PermissionType_1: Optional[PermissionType] = Field(None, alias='PermissionType')
    ShareId_1: Optional[ShareId] = Field(None, alias='ShareId')
    SharedWith_1: Optional[SharedWith] = Field(None, alias='SharedWith')
    Status: Optional[ShareStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')


class WorkloadSummary(BaseModel):
    ImprovementStatus: Optional[WorkloadImprovementStatus] = None
    Lenses: Optional[WorkloadLenses] = None
    Owner: Optional[AwsAccountId] = None
    RiskCounts_1: Optional[RiskCounts] = Field(None, alias='RiskCounts')
    UpdatedAt: Optional[Timestamp] = None
    WorkloadArn_1: Optional[WorkloadArn] = Field(None, alias='WorkloadArn')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')
    WorkloadName_1: Optional[WorkloadName] = Field(None, alias='WorkloadName')


class Format(Enum):
    PDF = 'PDF'
    JSON = 'JSON'


class GlobalSettingsPatchRequest(BaseModel):
    OrganizationSharingStatus_1: Optional[OrganizationSharingStatus] = Field(
        None,
        alias='OrganizationSharingStatus',
        description='The status of organization sharing settings.',
    )


class ImportLensPutRequest(BaseModel):
    ClientRequestToken: str = Field(
        ...,
        description='<p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>',
    )
    JSONString: constr(min_length=2, max_length=500000) = Field(
        ..., description='The JSON representation of a lens.'
    )
    LensAlias: Optional[constr(min_length=1, max_length=128)] = Field(
        None,
        description='<p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None, description='Tags to associate to a lens.'
    )


class LensStatus1(Enum):
    ALL = 'ALL'
    DRAFT = 'DRAFT'
    PUBLISHED = 'PUBLISHED'


class Status(Enum):
    ACCEPTED = 'ACCEPTED'
    REJECTED = 'REJECTED'
    PENDING = 'PENDING'
    REVOKED = 'REVOKED'
    EXPIRED = 'EXPIRED'
    ASSOCIATING = 'ASSOCIATING'
    ASSOCIATED = 'ASSOCIATED'
    FAILED = 'FAILED'


class LensesLensAliasSharesPostRequest(BaseModel):
    ClientRequestToken: str = Field(
        ...,
        description='<p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>',
    )
    SharedWith: constr(min_length=12, max_length=2048) = Field(
        ...,
        description='The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.',
    )


class LensesLensAliasVersionsPostRequest(BaseModel):
    ClientRequestToken: str = Field(
        ...,
        description='<p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>',
    )
    IsMajorVersion: Optional[bool] = Field(
        None, description='Set to true if this new major lens version.'
    )
    LensVersion: constr(min_length=1, max_length=32) = Field(
        ..., description='The version of the lens being created.'
    )


class NotificationsPostRequest(BaseModel):
    MaxResults: Optional[conint(ge=1, le=50)] = Field(
        None, description='The maximum number of results to return for this request.'
    )
    NextToken: Optional[str] = Field(
        None, description='The token to use to retrieve the next set of results.'
    )
    WorkloadId: Optional[constr(pattern=r'[0-9a-f]{32}')] = Field(
        None,
        description='The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.',
    )


class ShareInvitationsShareInvitationIdPatchRequest(BaseModel):
    ShareInvitationAction_1: ShareInvitationAction = Field(
        ...,
        alias='ShareInvitationAction',
        description='Share invitation action taken by contributor.',
    )


class TagsWorkloadArnPostRequest(BaseModel):
    Tags: Dict[str, TagValue] = Field(..., description='The tags for the resource.')


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class DiscoveryConfig(BaseModel):
    TrustedAdvisorIntegrationStatus_1: Optional[TrustedAdvisorIntegrationStatus] = (
        Field(None, alias='TrustedAdvisorIntegrationStatus')
    )


class Environment(Enum):
    PRODUCTION = 'PRODUCTION'
    PREPRODUCTION = 'PREPRODUCTION'


class WorkloadsPostRequest(BaseModel):
    AccountIds: Optional[List[AwsAccountId]] = Field(
        None,
        description='The list of Amazon Web Services account IDs associated with the workload.',
        max_length=100,
    )
    Applications: Optional[List[ApplicationArn]] = Field(
        None,
        description='List of AppRegistry application ARNs associated to the workload.',
        max_length=1,
    )
    ArchitecturalDesign: Optional[
        constr(pattern=r'^(|(https?|ftp):\/\/[^\s/$.?#].[^\s]*)$', max_length=2048)
    ] = Field(None, description='The URL of the architectural design for the workload.')
    AwsRegions: Optional[List[AwsRegion]] = Field(
        None,
        description='The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.',
        max_length=50,
    )
    ClientRequestToken: str = Field(
        ...,
        description='<p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>',
    )
    Description: constr(min_length=3, max_length=250) = Field(
        ..., description='The description for the workload.'
    )
    DiscoveryConfig_1: Optional[DiscoveryConfig] = Field(
        None,
        alias='DiscoveryConfig',
        description='Discovery configuration associated to the workload.',
    )
    Environment_1: Environment = Field(
        ..., alias='Environment', description='The environment for the workload.'
    )
    Industry: Optional[constr(max_length=100)] = Field(
        None, description='The industry for the workload.'
    )
    IndustryType: Optional[constr(max_length=100)] = Field(
        None,
        description='<p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>',
    )
    Lenses: List[LensAlias] = Field(
        ...,
        description='The list of lenses associated with the workload. Each lens is identified by its <a>LensSummary$LensAlias</a>.',
    )
    NonAwsRegions: Optional[List[WorkloadNonAwsRegion]] = Field(
        None,
        description=' The list of non-Amazon Web Services Regions associated with the workload.',
        max_length=5,
    )
    Notes: Optional[constr(max_length=2084)] = Field(
        None, description='The notes associated with the workload.'
    )
    PillarPriorities: Optional[List[PillarId]] = Field(
        None,
        description='The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.',
    )
    ReviewOwner: Optional[constr(min_length=3, max_length=255)] = Field(
        None,
        description='The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags to be associated with the workload.'
    )
    WorkloadName: constr(min_length=3, max_length=100) = Field(
        ...,
        description='<p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>',
    )


class ImprovementStatus(Enum):
    NOT_APPLICABLE = 'NOT_APPLICABLE'
    NOT_STARTED = 'NOT_STARTED'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETE = 'COMPLETE'
    RISK_ACKNOWLEDGED = 'RISK_ACKNOWLEDGED'


class WorkloadsWorkloadIdPatchRequest(BaseModel):
    AccountIds: Optional[List[AwsAccountId]] = Field(
        None,
        description='The list of Amazon Web Services account IDs associated with the workload.',
        max_length=100,
    )
    Applications: Optional[List[ApplicationArn]] = Field(
        None,
        description='List of AppRegistry application ARNs to associate to the workload.',
        max_length=1,
    )
    ArchitecturalDesign: Optional[
        constr(pattern=r'^(|(https?|ftp):\/\/[^\s/$.?#].[^\s]*)$', max_length=2048)
    ] = Field(None, description='The URL of the architectural design for the workload.')
    AwsRegions: Optional[List[AwsRegion]] = Field(
        None,
        description='The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.',
        max_length=50,
    )
    Description: Optional[constr(min_length=3, max_length=250)] = Field(
        None, description='The description for the workload.'
    )
    DiscoveryConfig_1: Optional[DiscoveryConfig] = Field(
        None,
        alias='DiscoveryConfig',
        description='Discovery configuration associated to the workload.',
    )
    Environment_1: Optional[Environment] = Field(
        None, alias='Environment', description='The environment for the workload.'
    )
    ImprovementStatus_1: Optional[ImprovementStatus] = Field(
        None,
        alias='ImprovementStatus',
        description='The improvement status for a workload.',
    )
    Industry: Optional[constr(max_length=100)] = Field(
        None, description='The industry for the workload.'
    )
    IndustryType: Optional[constr(max_length=100)] = Field(
        None,
        description='<p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>',
    )
    IsReviewOwnerUpdateAcknowledged: Optional[bool] = Field(
        None,
        description='<p>Flag indicating whether the workload owner has acknowledged that the <i>Review owner</i> field is required.</p> <p>If a <b>Review owner</b> is not added to the workload within 60 days of acknowledgement, access to the workload is restricted until an owner is added.</p>',
    )
    NonAwsRegions: Optional[List[WorkloadNonAwsRegion]] = Field(
        None,
        description=' The list of non-Amazon Web Services Regions associated with the workload.',
        max_length=5,
    )
    Notes: Optional[constr(max_length=2084)] = Field(
        None, description='The notes associated with the workload.'
    )
    PillarPriorities: Optional[List[PillarId]] = Field(
        None,
        description='The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.',
    )
    ReviewOwner: Optional[constr(min_length=3, max_length=255)] = Field(
        None,
        description='The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.',
    )
    WorkloadName: Optional[constr(min_length=3, max_length=100)] = Field(
        None,
        description='<p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>',
    )


class WorkloadsWorkloadIdAssociateLensesPatchRequest(BaseModel):
    LensAliases: List[LensAlias] = Field(
        ...,
        description='<p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p> <p>Identify a lens using its <a>LensSummary$LensAlias</a>.</p>',
        min_length=1,
    )


class WorkloadsWorkloadIdCheckSummariesPostRequest(BaseModel):
    ChoiceId: constr(min_length=1, max_length=64) = Field(
        ..., description='The ID of a choice.'
    )
    LensArn: str = Field(..., description='Well-Architected Lens ARN.')
    MaxResults: Optional[conint(ge=1, le=50)] = Field(
        None, description='The maximum number of results to return for this request.'
    )
    NextToken: Optional[str] = Field(
        None, description='The token to use to retrieve the next set of results.'
    )
    PillarId: constr(min_length=1, max_length=64) = Field(
        ...,
        description='<p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>',
    )
    QuestionId: constr(min_length=1, max_length=128) = Field(
        ..., description='The ID of the question.'
    )


class WorkloadsWorkloadIdChecksPostRequest(BaseModel):
    ChoiceId: constr(min_length=1, max_length=64) = Field(
        ..., description='The ID of a choice.'
    )
    LensArn: str = Field(..., description='Well-Architected Lens ARN.')
    MaxResults: Optional[conint(ge=1, le=50)] = Field(
        None, description='The maximum number of results to return for this request.'
    )
    NextToken: Optional[str] = Field(
        None, description='The token to use to retrieve the next set of results.'
    )
    PillarId: constr(min_length=1, max_length=64) = Field(
        ...,
        description='<p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>',
    )
    QuestionId: constr(min_length=1, max_length=128) = Field(
        ..., description='The ID of the question.'
    )


class WorkloadsWorkloadIdDisassociateLensesPatchRequest(BaseModel):
    LensAliases: List[LensAlias] = Field(
        ...,
        description='<p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p> <p>Identify a lens using its <a>LensSummary$LensAlias</a>.</p>',
        min_length=1,
    )


class WorkloadsWorkloadIdLensReviewsLensAliasPatchRequest(BaseModel):
    LensNotes: Optional[constr(max_length=2084)] = Field(
        None, description='The notes associated with the workload.'
    )
    PillarNotes: Optional[Dict[str, Notes]] = Field(
        None, description='List of pillar notes of a lens review in a workload.'
    )


class Reason(Enum):
    OUT_OF_SCOPE = 'OUT_OF_SCOPE'
    BUSINESS_PRIORITIES = 'BUSINESS_PRIORITIES'
    ARCHITECTURE_CONSTRAINTS = 'ARCHITECTURE_CONSTRAINTS'
    OTHER = 'OTHER'
    NONE = 'NONE'


class WorkloadsWorkloadIdLensReviewsLensAliasAnswersQuestionIdPatchRequest(BaseModel):
    ChoiceUpdates: Optional[Dict[str, ChoiceUpdate]] = Field(
        None,
        description='A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.',
    )
    IsApplicable: Optional[bool] = Field(
        None,
        description='Defines whether this question is applicable to a lens review.',
    )
    Notes: Optional[constr(max_length=2084)] = Field(
        None, description='The notes associated with the workload.'
    )
    Reason_1: Optional[Reason] = Field(
        None,
        alias='Reason',
        description='The reason why a question is not applicable to your workload.',
    )
    SelectedChoices: Optional[List[ChoiceId]] = Field(
        None,
        description='<p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>',
    )


class WorkloadsWorkloadIdLensReviewsLensAliasUpgradePutRequest(BaseModel):
    ClientRequestToken: Optional[str] = Field(
        None,
        description='<p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>',
    )
    MilestoneName: constr(min_length=3, max_length=100) = Field(
        ...,
        description='<p>The name of the milestone in a workload.</p> <p>Milestone names must be unique within a workload.</p>',
    )


class WorkloadsWorkloadIdMilestonesPostRequest(BaseModel):
    ClientRequestToken: str = Field(
        ...,
        description='<p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>',
    )
    MilestoneName: constr(min_length=3, max_length=100) = Field(
        ...,
        description='<p>The name of the milestone in a workload.</p> <p>Milestone names must be unique within a workload.</p>',
    )


class WorkloadsWorkloadIdMilestonesSummariesPostRequest(BaseModel):
    MaxResults: Optional[conint(ge=1, le=50)] = Field(
        None, description='The maximum number of results to return for this request.'
    )
    NextToken: Optional[str] = Field(
        None, description='The token to use to retrieve the next set of results.'
    )


class WorkloadsWorkloadIdSharesPostRequest(BaseModel):
    ClientRequestToken: str = Field(
        ...,
        description='<p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>',
    )
    PermissionType_1: PermissionType = Field(
        ...,
        alias='PermissionType',
        description='Permission granted on a workload share.',
    )
    SharedWith: constr(min_length=12, max_length=2048) = Field(
        ...,
        description='The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.',
    )


class WorkloadsWorkloadIdSharesShareIdPatchRequest(BaseModel):
    PermissionType_1: PermissionType = Field(
        ...,
        alias='PermissionType',
        description='Permission granted on a workload share.',
    )


class WorkloadsSummariesPostRequest(BaseModel):
    MaxResults: Optional[conint(ge=1, le=50)] = Field(
        None, description='The maximum number of results to return for this request.'
    )
    NextToken: Optional[str] = Field(
        None, description='The token to use to retrieve the next set of results.'
    )
    WorkloadNamePrefix: Optional[constr(max_length=100)] = Field(
        None,
        description='An optional string added to the beginning of each workload name returned in the results.',
    )


class AccountSummary(RootModel[Optional[Dict[str, CheckStatusCount]]]):
    root: Optional[Dict[str, CheckStatusCount]] = None


class AssociateLensesInput(BaseModel):
    LensAliases_1: LensAliases = Field(..., alias='LensAliases')


class BestPractice(BaseModel):
    ChoiceId_1: Optional[ChoiceId] = Field(None, alias='ChoiceId')
    ChoiceTitle_1: Optional[ChoiceTitle] = Field(None, alias='ChoiceTitle')


class BestPractices(RootModel[List[BestPractice]]):
    root: List[BestPractice]


class CheckDetail(BaseModel):
    AccountId: Optional[AwsAccountId] = None
    ChoiceId_1: Optional[ChoiceId] = Field(None, alias='ChoiceId')
    Description: Optional[CheckDescription] = None
    FlaggedResources_1: Optional[FlaggedResources] = Field(
        None, alias='FlaggedResources'
    )
    Id: Optional[CheckId] = None
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    Name: Optional[CheckName] = None
    PillarId_1: Optional[PillarId] = Field(None, alias='PillarId')
    Provider: Optional[CheckProvider] = None
    QuestionId_1: Optional[QuestionId] = Field(None, alias='QuestionId')
    Reason: Optional[CheckFailureReason] = None
    Status: Optional[CheckStatus] = None
    UpdatedAt: Optional[Timestamp] = None


class CheckDetails(RootModel[List[CheckDetail]]):
    root: List[CheckDetail]


class CheckSummary(BaseModel):
    AccountSummary_1: Optional[AccountSummary] = Field(None, alias='AccountSummary')
    ChoiceId_1: Optional[ChoiceId] = Field(None, alias='ChoiceId')
    Description: Optional[CheckDescription] = None
    Id: Optional[CheckId] = None
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    Name: Optional[CheckName] = None
    PillarId_1: Optional[PillarId] = Field(None, alias='PillarId')
    Provider: Optional[CheckProvider] = None
    QuestionId_1: Optional[QuestionId] = Field(None, alias='QuestionId')
    Status: Optional[CheckStatus] = None
    UpdatedAt: Optional[Timestamp] = None


class ChoiceAnswer(BaseModel):
    ChoiceId_1: Optional[ChoiceId] = Field(None, alias='ChoiceId')
    Notes: Optional[ChoiceNotes] = None
    Reason: Optional[ChoiceReason] = None
    Status: Optional[ChoiceStatus] = None


class ChoiceAnswerSummary(BaseModel):
    ChoiceId_1: Optional[ChoiceId] = Field(None, alias='ChoiceId')
    Reason: Optional[ChoiceReason] = None
    Status: Optional[ChoiceStatus] = None


class ChoiceAnswers(RootModel[List[ChoiceAnswer]]):
    root: List[ChoiceAnswer]


class ChoiceContent(BaseModel):
    DisplayText: Optional[ChoiceContentDisplayText] = None
    Url: Optional[ChoiceContentUrl] = None


class ChoiceImprovementPlan(BaseModel):
    ChoiceId_1: Optional[ChoiceId] = Field(None, alias='ChoiceId')
    DisplayText_1: Optional[DisplayText] = Field(None, alias='DisplayText')
    ImprovementPlanUrl_1: Optional[ImprovementPlanUrl] = Field(
        None, alias='ImprovementPlanUrl'
    )


class ChoiceImprovementPlans(RootModel[List[ChoiceImprovementPlan]]):
    root: List[ChoiceImprovementPlan]


class CreateLensShareInput(BaseModel):
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    SharedWith_1: SharedWith = Field(..., alias='SharedWith')


class CreateLensShareOutput(BaseModel):
    ShareId_1: Optional[ShareId] = Field(None, alias='ShareId')


class CreateLensVersionInput(BaseModel):
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    IsMajorVersion_1: Optional[IsMajorVersion] = Field(None, alias='IsMajorVersion')
    LensVersion_1: LensVersion = Field(..., alias='LensVersion')


class CreateLensVersionOutput(BaseModel):
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    LensVersion_1: Optional[LensVersion] = Field(None, alias='LensVersion')


class CreateMilestoneInput(BaseModel):
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    MilestoneName_1: MilestoneName = Field(..., alias='MilestoneName')


class CreateMilestoneOutput(BaseModel):
    MilestoneNumber_1: Optional[MilestoneNumber] = Field(None, alias='MilestoneNumber')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')


class CreateWorkloadOutput(BaseModel):
    WorkloadArn_1: Optional[WorkloadArn] = Field(None, alias='WorkloadArn')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')


class CreateWorkloadShareInput(BaseModel):
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    PermissionType_1: PermissionType = Field(..., alias='PermissionType')
    SharedWith_1: SharedWith = Field(..., alias='SharedWith')


class CreateWorkloadShareOutput(BaseModel):
    ShareId_1: Optional[ShareId] = Field(None, alias='ShareId')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')


class DisassociateLensesInput(BaseModel):
    LensAliases_1: LensAliases = Field(..., alias='LensAliases')


class ExportLensOutput(BaseModel):
    LensJSON_1: Optional[LensJSON] = Field(None, alias='LensJSON')


class GetLensReviewReportOutput(BaseModel):
    LensReviewReport_1: Optional[LensReviewReport] = Field(
        None, alias='LensReviewReport'
    )
    MilestoneNumber_1: Optional[MilestoneNumber] = Field(None, alias='MilestoneNumber')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')


class ImportLensOutput(BaseModel):
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    Status: Optional[ImportLensStatus] = None


class ImprovementSummary(BaseModel):
    ImprovementPlanUrl_1: Optional[ImprovementPlanUrl] = Field(
        None, alias='ImprovementPlanUrl'
    )
    ImprovementPlans: Optional[ChoiceImprovementPlans] = None
    PillarId_1: Optional[PillarId] = Field(None, alias='PillarId')
    QuestionId_1: Optional[QuestionId] = Field(None, alias='QuestionId')
    QuestionTitle_1: Optional[QuestionTitle] = Field(None, alias='QuestionTitle')
    Risk_1: Optional[Risk] = Field(None, alias='Risk')


class LensReviewSummary(BaseModel):
    LensAlias_1: Optional[LensAlias] = Field(None, alias='LensAlias')
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    LensName_1: Optional[LensName] = Field(None, alias='LensName')
    LensStatus_1: Optional[LensStatus] = Field(None, alias='LensStatus')
    LensVersion_1: Optional[LensVersion] = Field(None, alias='LensVersion')
    RiskCounts_1: Optional[RiskCounts] = Field(None, alias='RiskCounts')
    UpdatedAt: Optional[Timestamp] = None


class LensShareSummary(BaseModel):
    ShareId_1: Optional[ShareId] = Field(None, alias='ShareId')
    SharedWith_1: Optional[SharedWith] = Field(None, alias='SharedWith')
    Status: Optional[ShareStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')


class LensSummary(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    Description: Optional[LensDescription] = None
    LensAlias_1: Optional[LensAlias] = Field(None, alias='LensAlias')
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    LensName_1: Optional[LensName] = Field(None, alias='LensName')
    LensStatus_1: Optional[LensStatus] = Field(None, alias='LensStatus')
    LensType_1: Optional[LensType] = Field(None, alias='LensType')
    LensVersion_1: Optional[LensVersion] = Field(None, alias='LensVersion')
    Owner: Optional[AwsAccountId] = None
    UpdatedAt: Optional[Timestamp] = None


class LensUpgradeSummary(BaseModel):
    CurrentLensVersion: Optional[LensVersion] = None
    LatestLensVersion: Optional[LensVersion] = None
    LensAlias_1: Optional[LensAlias] = Field(None, alias='LensAlias')
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')
    WorkloadName_1: Optional[WorkloadName] = Field(None, alias='WorkloadName')


class ListCheckDetailsInput(BaseModel):
    ChoiceId_1: ChoiceId = Field(..., alias='ChoiceId')
    LensArn_1: LensArn = Field(..., alias='LensArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PillarId_1: PillarId = Field(..., alias='PillarId')
    QuestionId_1: QuestionId = Field(..., alias='QuestionId')


class ListCheckDetailsOutput(BaseModel):
    CheckDetails_1: Optional[CheckDetails] = Field(None, alias='CheckDetails')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListCheckSummariesInput(BaseModel):
    ChoiceId_1: ChoiceId = Field(..., alias='ChoiceId')
    LensArn_1: LensArn = Field(..., alias='LensArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PillarId_1: PillarId = Field(..., alias='PillarId')
    QuestionId_1: QuestionId = Field(..., alias='QuestionId')


class ListMilestonesInput(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListNotificationsInput(BaseModel):
    MaxResults: Optional[ListNotificationsMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')


class ListWorkloadsInput(BaseModel):
    MaxResults: Optional[ListWorkloadsMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WorkloadNamePrefix_1: Optional[WorkloadNamePrefix] = Field(
        None, alias='WorkloadNamePrefix'
    )


class MilestoneSummary(BaseModel):
    MilestoneName_1: Optional[MilestoneName] = Field(None, alias='MilestoneName')
    MilestoneNumber_1: Optional[MilestoneNumber] = Field(None, alias='MilestoneNumber')
    RecordedAt: Optional[Timestamp] = None
    WorkloadSummary_1: Optional[WorkloadSummary] = Field(None, alias='WorkloadSummary')


class NotificationSummary(BaseModel):
    LensUpgradeSummary_1: Optional[LensUpgradeSummary] = Field(
        None, alias='LensUpgradeSummary'
    )
    Type: Optional[NotificationType] = None


class PillarReviewSummary(BaseModel):
    Notes_1: Optional[Notes] = Field(None, alias='Notes')
    PillarId_1: Optional[PillarId] = Field(None, alias='PillarId')
    PillarName_1: Optional[PillarName] = Field(None, alias='PillarName')
    RiskCounts_1: Optional[RiskCounts] = Field(None, alias='RiskCounts')


class QuestionDifference(BaseModel):
    DifferenceStatus_1: Optional[DifferenceStatus] = Field(
        None, alias='DifferenceStatus'
    )
    QuestionId_1: Optional[QuestionId] = Field(None, alias='QuestionId')
    QuestionTitle_1: Optional[QuestionTitle] = Field(None, alias='QuestionTitle')


class QuestionDifferences(RootModel[List[QuestionDifference]]):
    root: List[QuestionDifference]


class QuestionMetric(BaseModel):
    BestPractices_1: Optional[BestPractices] = Field(None, alias='BestPractices')
    QuestionId_1: Optional[QuestionId] = Field(None, alias='QuestionId')
    Risk_1: Optional[Risk] = Field(None, alias='Risk')


class QuestionMetrics(RootModel[List[QuestionMetric]]):
    root: List[QuestionMetric]


class ShareInvitation(BaseModel):
    LensAlias_1: Optional[LensAlias] = Field(None, alias='LensAlias')
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    ShareInvitationId_1: Optional[ShareInvitationId] = Field(
        None, alias='ShareInvitationId'
    )
    ShareResourceType_1: Optional[ShareResourceType] = Field(
        None, alias='ShareResourceType'
    )
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')


class ShareInvitationSummary(BaseModel):
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    LensName_1: Optional[LensName] = Field(None, alias='LensName')
    PermissionType_1: Optional[PermissionType] = Field(None, alias='PermissionType')
    ShareInvitationId_1: Optional[ShareInvitationId] = Field(
        None, alias='ShareInvitationId'
    )
    ShareResourceType_1: Optional[ShareResourceType] = Field(
        None, alias='ShareResourceType'
    )
    SharedBy: Optional[AwsAccountId] = None
    SharedWith_1: Optional[SharedWith] = Field(None, alias='SharedWith')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')
    WorkloadName_1: Optional[WorkloadName] = Field(None, alias='WorkloadName')


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceInput(BaseModel):
    Tags: TagMap


class UpdateShareInvitationOutput(BaseModel):
    ShareInvitation_1: Optional[ShareInvitation] = Field(None, alias='ShareInvitation')


class UpdateWorkloadInput(BaseModel):
    AccountIds: Optional[WorkloadAccountIds] = None
    Applications: Optional[WorkloadApplications] = None
    ArchitecturalDesign: Optional[WorkloadArchitecturalDesign] = None
    AwsRegions: Optional[WorkloadAwsRegions] = None
    Description: Optional[WorkloadDescription] = None
    DiscoveryConfig: Optional[WorkloadDiscoveryConfig] = None
    Environment: Optional[WorkloadEnvironment] = None
    ImprovementStatus: Optional[WorkloadImprovementStatus] = None
    Industry: Optional[WorkloadIndustry] = None
    IndustryType: Optional[WorkloadIndustryType] = None
    IsReviewOwnerUpdateAcknowledged_1: Optional[IsReviewOwnerUpdateAcknowledged] = (
        Field(None, alias='IsReviewOwnerUpdateAcknowledged')
    )
    NonAwsRegions: Optional[WorkloadNonAwsRegions] = None
    Notes_1: Optional[Notes] = Field(None, alias='Notes')
    PillarPriorities: Optional[WorkloadPillarPriorities] = None
    ReviewOwner: Optional[WorkloadReviewOwner] = None
    WorkloadName_1: Optional[WorkloadName] = Field(None, alias='WorkloadName')


class UpdateWorkloadShareOutput(BaseModel):
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')
    WorkloadShare_1: Optional[WorkloadShare] = Field(None, alias='WorkloadShare')


class Urls(RootModel[List[ChoiceContent]]):
    root: List[ChoiceContent]


class Workload(BaseModel):
    AccountIds: Optional[WorkloadAccountIds] = None
    Applications: Optional[WorkloadApplications] = None
    ArchitecturalDesign: Optional[WorkloadArchitecturalDesign] = None
    AwsRegions: Optional[WorkloadAwsRegions] = None
    Description: Optional[WorkloadDescription] = None
    DiscoveryConfig: Optional[WorkloadDiscoveryConfig] = None
    Environment: Optional[WorkloadEnvironment] = None
    ImprovementStatus: Optional[WorkloadImprovementStatus] = None
    Industry: Optional[WorkloadIndustry] = None
    IndustryType: Optional[WorkloadIndustryType] = None
    IsReviewOwnerUpdateAcknowledged_1: Optional[IsReviewOwnerUpdateAcknowledged] = (
        Field(None, alias='IsReviewOwnerUpdateAcknowledged')
    )
    Lenses: Optional[WorkloadLenses] = None
    NonAwsRegions: Optional[WorkloadNonAwsRegions] = None
    Notes_1: Optional[Notes] = Field(None, alias='Notes')
    Owner: Optional[AwsAccountId] = None
    PillarPriorities: Optional[WorkloadPillarPriorities] = None
    ReviewOwner: Optional[WorkloadReviewOwner] = None
    ReviewRestrictionDate: Optional[Timestamp] = None
    RiskCounts_1: Optional[RiskCounts] = Field(None, alias='RiskCounts')
    ShareInvitationId_1: Optional[ShareInvitationId] = Field(
        None, alias='ShareInvitationId'
    )
    Tags: Optional[TagMap] = None
    UpdatedAt: Optional[Timestamp] = None
    WorkloadArn_1: Optional[WorkloadArn] = Field(None, alias='WorkloadArn')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')
    WorkloadName_1: Optional[WorkloadName] = Field(None, alias='WorkloadName')


class WorkloadShareSummaries(RootModel[List[WorkloadShareSummary]]):
    root: List[WorkloadShareSummary] = Field(
        ..., description='A list of workload share summaries.'
    )


class WorkloadSummaries(RootModel[List[WorkloadSummary]]):
    root: List[WorkloadSummary] = Field(
        ..., description='A list of workload summaries.'
    )


class AdditionalResources(BaseModel):
    Content: Optional[Urls] = None
    Type: Optional[AdditionalResourceType] = None


class AdditionalResourcesList(RootModel[List[AdditionalResources]]):
    root: List[AdditionalResources]


class CheckSummaries(RootModel[List[CheckSummary]]):
    root: List[CheckSummary]


class Choice(BaseModel):
    AdditionalResources: Optional[AdditionalResourcesList] = None
    ChoiceId_1: Optional[ChoiceId] = Field(None, alias='ChoiceId')
    Description: Optional[ChoiceDescription] = None
    HelpfulResource: Optional[ChoiceContent] = None
    ImprovementPlan: Optional[ChoiceContent] = None
    Title: Optional[ChoiceTitle] = None


class ChoiceAnswerSummaries(RootModel[List[ChoiceAnswerSummary]]):
    root: List[ChoiceAnswerSummary]


class Choices(RootModel[List[Choice]]):
    root: List[Choice] = Field(
        ..., description='List of choices available for a question.'
    )


class CreateWorkloadInput(BaseModel):
    AccountIds: Optional[WorkloadAccountIds] = None
    Applications: Optional[WorkloadApplications] = None
    ArchitecturalDesign: Optional[WorkloadArchitecturalDesign] = None
    AwsRegions: Optional[WorkloadAwsRegions] = None
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    Description: WorkloadDescription
    DiscoveryConfig: Optional[WorkloadDiscoveryConfig] = None
    Environment: WorkloadEnvironment
    Industry: Optional[WorkloadIndustry] = None
    IndustryType: Optional[WorkloadIndustryType] = None
    Lenses: WorkloadLenses
    NonAwsRegions: Optional[WorkloadNonAwsRegions] = None
    Notes_1: Optional[Notes] = Field(None, alias='Notes')
    PillarPriorities: Optional[WorkloadPillarPriorities] = None
    ReviewOwner: Optional[WorkloadReviewOwner] = None
    Tags: Optional[TagMap] = None
    WorkloadName_1: WorkloadName = Field(..., alias='WorkloadName')


class GetWorkloadOutput(BaseModel):
    Workload_1: Optional[Workload] = Field(None, alias='Workload')


class ImportLensInput(BaseModel):
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    JSONString: LensJSON
    LensAlias_1: Optional[LensAlias] = Field(None, alias='LensAlias')
    Tags: Optional[TagMap] = None


class ImprovementSummaries(RootModel[List[ImprovementSummary]]):
    root: List[ImprovementSummary] = Field(
        ..., description='List of improvement summaries of lens review in a workload.'
    )


class Lens(BaseModel):
    Description: Optional[LensDescription] = None
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    LensVersion_1: Optional[LensVersion] = Field(None, alias='LensVersion')
    Name: Optional[LensName] = None
    Owner: Optional[LensOwner] = None
    ShareInvitationId_1: Optional[ShareInvitationId] = Field(
        None, alias='ShareInvitationId'
    )
    Tags: Optional[TagMap] = None


class LensReviewSummaries(RootModel[List[LensReviewSummary]]):
    root: List[LensReviewSummary] = Field(
        ..., description='List of lens summaries of lens reviews of a workload.'
    )


class LensShareSummaries(RootModel[List[LensShareSummary]]):
    root: List[LensShareSummary]


class LensSummaries(RootModel[List[LensSummary]]):
    root: List[LensSummary] = Field(
        ..., description='List of lens summaries of available lenses.'
    )


class ListCheckSummariesOutput(BaseModel):
    CheckSummaries_1: Optional[CheckSummaries] = Field(None, alias='CheckSummaries')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListLensReviewImprovementsOutput(BaseModel):
    ImprovementSummaries_1: Optional[ImprovementSummaries] = Field(
        None, alias='ImprovementSummaries'
    )
    LensAlias_1: Optional[LensAlias] = Field(None, alias='LensAlias')
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    MilestoneNumber_1: Optional[MilestoneNumber] = Field(None, alias='MilestoneNumber')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')


class ListLensReviewsOutput(BaseModel):
    LensReviewSummaries_1: Optional[LensReviewSummaries] = Field(
        None, alias='LensReviewSummaries'
    )
    MilestoneNumber_1: Optional[MilestoneNumber] = Field(None, alias='MilestoneNumber')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')


class ListLensSharesOutput(BaseModel):
    LensShareSummaries_1: Optional[LensShareSummaries] = Field(
        None, alias='LensShareSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListLensesOutput(BaseModel):
    LensSummaries_1: Optional[LensSummaries] = Field(None, alias='LensSummaries')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceOutput(BaseModel):
    Tags: Optional[TagMap] = None


class ListWorkloadSharesOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')
    WorkloadShareSummaries_1: Optional[WorkloadShareSummaries] = Field(
        None, alias='WorkloadShareSummaries'
    )


class ListWorkloadsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WorkloadSummaries_1: Optional[WorkloadSummaries] = Field(
        None, alias='WorkloadSummaries'
    )


class Milestone(BaseModel):
    MilestoneName_1: Optional[MilestoneName] = Field(None, alias='MilestoneName')
    MilestoneNumber_1: Optional[MilestoneNumber] = Field(None, alias='MilestoneNumber')
    RecordedAt: Optional[Timestamp] = None
    Workload_1: Optional[Workload] = Field(None, alias='Workload')


class MilestoneSummaries(RootModel[List[MilestoneSummary]]):
    root: List[MilestoneSummary] = Field(
        ..., description='A list of milestone summaries.'
    )


class NotificationSummaries(RootModel[List[NotificationSummary]]):
    root: List[NotificationSummary]


class PillarDifference(BaseModel):
    DifferenceStatus_1: Optional[DifferenceStatus] = Field(
        None, alias='DifferenceStatus'
    )
    PillarId_1: Optional[PillarId] = Field(None, alias='PillarId')
    PillarName_1: Optional[PillarName] = Field(None, alias='PillarName')
    QuestionDifferences_1: Optional[QuestionDifferences] = Field(
        None, alias='QuestionDifferences'
    )


class PillarDifferences(RootModel[List[PillarDifference]]):
    root: List[PillarDifference]


class PillarMetric(BaseModel):
    PillarId_1: Optional[PillarId] = Field(None, alias='PillarId')
    Questions: Optional[QuestionMetrics] = None
    RiskCounts_1: Optional[RiskCounts] = Field(None, alias='RiskCounts')


class PillarMetrics(RootModel[List[PillarMetric]]):
    root: List[PillarMetric]


class PillarReviewSummaries(RootModel[List[PillarReviewSummary]]):
    root: List[PillarReviewSummary] = Field(
        ..., description='List of pillar review summaries of lens review in a workload.'
    )


class ShareInvitationSummaries(RootModel[List[ShareInvitationSummary]]):
    root: List[ShareInvitationSummary]


class UpdateWorkloadOutput(BaseModel):
    Workload_1: Optional[Workload] = Field(None, alias='Workload')


class VersionDifferences(BaseModel):
    PillarDifferences_1: Optional[PillarDifferences] = Field(
        None, alias='PillarDifferences'
    )


class Answer(BaseModel):
    ChoiceAnswers_1: Optional[ChoiceAnswers] = Field(None, alias='ChoiceAnswers')
    Choices_1: Optional[Choices] = Field(None, alias='Choices')
    HelpfulResourceDisplayText: Optional[DisplayText] = None
    HelpfulResourceUrl_1: Optional[HelpfulResourceUrl] = Field(
        None, alias='HelpfulResourceUrl'
    )
    ImprovementPlanUrl_1: Optional[ImprovementPlanUrl] = Field(
        None, alias='ImprovementPlanUrl'
    )
    IsApplicable_1: Optional[IsApplicable] = Field(None, alias='IsApplicable')
    Notes_1: Optional[Notes] = Field(None, alias='Notes')
    PillarId_1: Optional[PillarId] = Field(None, alias='PillarId')
    QuestionDescription_1: Optional[QuestionDescription] = Field(
        None, alias='QuestionDescription'
    )
    QuestionId_1: Optional[QuestionId] = Field(None, alias='QuestionId')
    QuestionTitle_1: Optional[QuestionTitle] = Field(None, alias='QuestionTitle')
    Reason: Optional[AnswerReason] = None
    Risk_1: Optional[Risk] = Field(None, alias='Risk')
    SelectedChoices_1: Optional[SelectedChoices] = Field(None, alias='SelectedChoices')


class AnswerSummary(BaseModel):
    ChoiceAnswerSummaries_1: Optional[ChoiceAnswerSummaries] = Field(
        None, alias='ChoiceAnswerSummaries'
    )
    Choices_1: Optional[Choices] = Field(None, alias='Choices')
    IsApplicable_1: Optional[IsApplicable] = Field(None, alias='IsApplicable')
    PillarId_1: Optional[PillarId] = Field(None, alias='PillarId')
    QuestionId_1: Optional[QuestionId] = Field(None, alias='QuestionId')
    QuestionTitle_1: Optional[QuestionTitle] = Field(None, alias='QuestionTitle')
    Reason: Optional[AnswerReason] = None
    Risk_1: Optional[Risk] = Field(None, alias='Risk')
    SelectedChoices_1: Optional[SelectedChoices] = Field(None, alias='SelectedChoices')


class GetAnswerOutput(BaseModel):
    Answer_1: Optional[Answer] = Field(None, alias='Answer')
    LensAlias_1: Optional[LensAlias] = Field(None, alias='LensAlias')
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    MilestoneNumber_1: Optional[MilestoneNumber] = Field(None, alias='MilestoneNumber')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')


class GetLensOutput(BaseModel):
    Lens_1: Optional[Lens] = Field(None, alias='Lens')


class GetLensVersionDifferenceOutput(BaseModel):
    BaseLensVersion: Optional[LensVersion] = None
    LatestLensVersion: Optional[LensVersion] = None
    LensAlias_1: Optional[LensAlias] = Field(None, alias='LensAlias')
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    TargetLensVersion: Optional[LensVersion] = None
    VersionDifferences_1: Optional[VersionDifferences] = Field(
        None, alias='VersionDifferences'
    )


class GetMilestoneOutput(BaseModel):
    Milestone_1: Optional[Milestone] = Field(None, alias='Milestone')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')


class LensMetric(BaseModel):
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    Pillars: Optional[PillarMetrics] = None
    RiskCounts_1: Optional[RiskCounts] = Field(None, alias='RiskCounts')


class LensMetrics(RootModel[List[LensMetric]]):
    root: List[LensMetric]


class LensReview(BaseModel):
    LensAlias_1: Optional[LensAlias] = Field(None, alias='LensAlias')
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    LensName_1: Optional[LensName] = Field(None, alias='LensName')
    LensStatus_1: Optional[LensStatus] = Field(None, alias='LensStatus')
    LensVersion_1: Optional[LensVersion] = Field(None, alias='LensVersion')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Notes_1: Optional[Notes] = Field(None, alias='Notes')
    PillarReviewSummaries_1: Optional[PillarReviewSummaries] = Field(
        None, alias='PillarReviewSummaries'
    )
    RiskCounts_1: Optional[RiskCounts] = Field(None, alias='RiskCounts')
    UpdatedAt: Optional[Timestamp] = None


class ListMilestonesOutput(BaseModel):
    MilestoneSummaries_1: Optional[MilestoneSummaries] = Field(
        None, alias='MilestoneSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')


class ListNotificationsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    NotificationSummaries_1: Optional[NotificationSummaries] = Field(
        None, alias='NotificationSummaries'
    )


class ListShareInvitationsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ShareInvitationSummaries_1: Optional[ShareInvitationSummaries] = Field(
        None, alias='ShareInvitationSummaries'
    )


class UpdateAnswerOutput(BaseModel):
    Answer_1: Optional[Answer] = Field(None, alias='Answer')
    LensAlias_1: Optional[LensAlias] = Field(None, alias='LensAlias')
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')


class UpdateLensReviewOutput(BaseModel):
    LensReview_1: Optional[LensReview] = Field(None, alias='LensReview')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')


class AnswerSummaries(RootModel[List[AnswerSummary]]):
    root: List[AnswerSummary] = Field(
        ..., description='List of answer summaries of lens review in a workload.'
    )


class ConsolidatedReportMetric(BaseModel):
    Lenses: Optional[LensMetrics] = None
    LensesAppliedCount_1: Optional[LensesAppliedCount] = Field(
        None, alias='LensesAppliedCount'
    )
    MetricType_1: Optional[MetricType] = Field(None, alias='MetricType')
    RiskCounts_1: Optional[RiskCounts] = Field(None, alias='RiskCounts')
    UpdatedAt: Optional[Timestamp] = None
    WorkloadArn_1: Optional[WorkloadArn] = Field(None, alias='WorkloadArn')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')
    WorkloadName_1: Optional[WorkloadName] = Field(None, alias='WorkloadName')


class ConsolidatedReportMetrics(RootModel[List[ConsolidatedReportMetric]]):
    root: List[ConsolidatedReportMetric]


class GetConsolidatedReportOutput(BaseModel):
    Base64String_1: Optional[Base64String] = Field(None, alias='Base64String')
    Metrics: Optional[ConsolidatedReportMetrics] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetLensReviewOutput(BaseModel):
    LensReview_1: Optional[LensReview] = Field(None, alias='LensReview')
    MilestoneNumber_1: Optional[MilestoneNumber] = Field(None, alias='MilestoneNumber')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')


class ListAnswersOutput(BaseModel):
    AnswerSummaries_1: Optional[AnswerSummaries] = Field(None, alias='AnswerSummaries')
    LensAlias_1: Optional[LensAlias] = Field(None, alias='LensAlias')
    LensArn_1: Optional[LensArn] = Field(None, alias='LensArn')
    MilestoneNumber_1: Optional[MilestoneNumber] = Field(None, alias='MilestoneNumber')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WorkloadId_1: Optional[WorkloadId] = Field(None, alias='WorkloadId')
